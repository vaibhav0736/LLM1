import dotenv from "dotenv";
import OpenAI from "openai";

dotenv.config();


const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_MODEL = process.env.OPENAI_MODEL || "gpt-3.5-turbo";
const OPENAI_MAX_TOKENS = Number(process.env.OPENAI_MAX_TOKENS || 300); 

let openaiClient = null;
if (OPENAI_API_KEY) {
  openaiClient = new OpenAI({ apiKey: OPENAI_API_KEY });
}

console.log(" LLM Utility loaded");
console.log(" OPENAI_API_KEY configured:", !!OPENAI_API_KEY);
console.log(" OPENAI_MODEL:", OPENAI_MODEL);

/**
 * Generates a concise summary of the given content using an LLM.
 * * @param {string} content The article text to summarize.
 * @param {string} [provider] The LLM provider to use (default: 'openai').
 * @returns {Promise<string>} The generated summary text.
 */
export const summarizeWithLLM = async (content, provider = process.env.LLM_PROVIDER || "openai") => {
  if (!content || typeof content !== 'string' || content.trim().length === 0) {
    throw new Error('Content is required and must be a non-empty string');
  }

  console.log(" summarizeWithLLM called with provider:", provider);
  console.log(" Original content length:", content.length, 'characters');
  
  const prompt = `Create a concise summary of the following text. Follow these rules STRICTLY:
1. The summary MUST be 2-3 sentences maximum
2. Focus ONLY on the main ideas and key information
3. Do NOT include any direct quotes or verbatim text from the original
4. Use different wording than the original text
5. Keep it clear and to the point
6. The summary MUST be significantly shorter than the original

Original text:
${content}

Summary (2-3 sentences):`;

  if (provider === "openai") {
    if (!openaiClient) throw new Error("OpenAI key not configured (OPENAI_API_KEY). Cannot use 'openai' provider.");

    try {
      const resp = await openaiClient.chat.completions.create({
        model: OPENAI_MODEL,
        messages: [
          {
            role: "system",
            content: "You are a helpful assistant that creates concise, high-quality summaries. You always rewrite the content in your own words and never copy text directly from the source."
          },
          { role: "user", content: prompt }
        ],
        max_tokens: OPENAI_MAX_TOKENS, 
        temperature: 0.3, 
        top_p: 0.9,
        frequency_penalty: 0.8, 
        presence_penalty: 0.8, 
      });

      const text = resp?.choices?.[0]?.message?.content?.trim();
      console.log('ðŸ§¾ Generated summary:', text);
      
      if (!text) {
        throw new Error("No summary was generated by the LLM.");
      }
      
      // Verification check: Throw an error if the model failed to compress the content significantly.
      if (content.length > 500 && text.length >= content.length * 0.9) {
         throw new Error("Generated summary is too similar in length to the original content. LLM may have failed to summarize.");
      }
      
      return text;
    } catch (error) {
      console.error(' Summarization error:', error);
      throw new Error(`Failed to generate summary with OpenAI: ${error.message}`);
    }
  }

  // --- MOCK PROVIDER PATH (Returns content snippet) ---
  if (provider === "mock" || !OPENAI_API_KEY) {
    console.log(" Using mock provider, returning content snippet.");
    const snippet = content.replace(/\s+/g, " ").slice(0, 300);
    // Return a clearly labeled mock response
    return `[MOCK SUMMARY: The LLM provider is set to 'mock' or the OpenAI API key is missing. This is a partial excerpt, not a true summary.]
    
Excerpt from original content: 
"${snippet}${content.length > 300 ? '...' : ''}"`;
  }

  throw new Error(`Unknown provider: ${provider}. Must be 'openai' or 'mock'.`);
};
